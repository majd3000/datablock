import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import path from "path";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin-
*/
`;

const prod = process.argv[2] === "production";

let pluginDirs;
try {
  const localConfig = JSON.parse(fs.readFileSync("local.config.json", "utf-8"));
  pluginDirs = localConfig.pluginDirs || [];
} catch (e) {
  pluginDirs = [];
}

const copyDir = async (src, dest) => {
  await fs.promises.mkdir(dest, { recursive: true });
  const entries = await fs.promises.readdir(src, { withFileTypes: true });

  for (let entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);

    entry.isDirectory()
      ? await copyDir(srcPath, destPath)
      : await fs.promises.copyFile(srcPath, destPath);
  }
};

const copyManifest = async () => {
  const manifestPath = "manifest.json";
  const destPath = path.join("dist", "manifest.json");
  await fs.promises.copyFile(manifestPath, destPath);
};

const onRebuild = (context) => ({
  name: "on-rebuild",
  setup(build) {
    build.onEnd(async (result) => {
      if (result.errors.length > 0) {
        console.error(`${context} build failed:`, result.errors);
      } else {
        await copyManifest();
        for (const dir of pluginDirs) {
          await copyDir("dist", dir);
          console.log(`${context} build succeeded. Copied dist to ${dir}`);
        }
      }
    });
  },
});

const jsContext = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ["src/main.ts"],
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/collab",
    "@lezer/lr",
    ...builtins,
  ],
  format: "cjs",
  target: "es2018",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  outfile: "dist/main.js",
  minify: prod,
  plugins: prod ? [] : [onRebuild("JS")],
});

const cssContext = await esbuild.context({
  entryPoints: ["styles.css"],
  bundle: true,
  outfile: "dist/styles.css",
  minify: prod,
  plugins: prod ? [] : [onRebuild("CSS")],
});

if (prod) {
  await jsContext.rebuild();
  await cssContext.rebuild();
  await copyManifest();
  for (const dir of pluginDirs) {
    await copyDir("dist", dir);
    console.log(`Copied dist to ${dir}`);
  }
  process.exit(0);
} else {
  await jsContext.watch();
  await cssContext.watch();
}